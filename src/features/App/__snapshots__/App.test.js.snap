// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders without crashing 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Grid
    columns="3"
  >
    <GridColumn>
      <Button
        as="button"
        content="Check clean up"
        fluid={true}
        onClick={[Function]}
        role="button"
      />
      <Segment
        color="red"
      >
        <Connect(FormogenForm)
          createUrl="http://localhost:8000/api/v1/sample/authors/"
          describeUrl="http://localhost:8000/api/v1/sample/authors/describe/"
          formId="form-1"
          getFieldComponent={[Function]}
          getFormComponent={[Function]}
          locale="ru"
        />
      </Segment>
    </GridColumn>
    <GridColumn>
      <Segment
        color="red"
      >
        <Connect(FormogenForm)
          describeUrl="http://localhost:8000/api/v1/sample/authors/1/describe_object/"
          formId="form-2"
          getFieldComponent={[Function]}
          getFormComponent={[Function]}
          objectUrl="http://localhost:8000/api/v1/sample/authors/1/"
        />
      </Segment>
    </GridColumn>
    <GridColumn>
      <Segment
        color="red"
      >
        <Connect(FormogenForm)
          describeUrl="http://localhost:8000/api/v1/sample/books/1/describe_object/"
          formId="form-3"
          getFieldComponent={[Function]}
          getFormComponent={[Function]}
          objectUrl="http://localhost:8000/api/v1/sample/books/1/"
        />
      </Segment>
    </GridColumn>
  </Grid>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <GridColumn>
          <Button
            as="button"
            content="Check clean up"
            fluid={true}
            onClick={[Function]}
            role="button"
          />
          <Segment
            color="red"
          >
            <Connect(FormogenForm)
              createUrl="http://localhost:8000/api/v1/sample/authors/"
              describeUrl="http://localhost:8000/api/v1/sample/authors/describe/"
              formId="form-1"
              getFieldComponent={[Function]}
              getFormComponent={[Function]}
              locale="ru"
            />
          </Segment>
        </GridColumn>,
        <GridColumn>
          <Segment
            color="red"
          >
            <Connect(FormogenForm)
              describeUrl="http://localhost:8000/api/v1/sample/authors/1/describe_object/"
              formId="form-2"
              getFieldComponent={[Function]}
              getFormComponent={[Function]}
              objectUrl="http://localhost:8000/api/v1/sample/authors/1/"
            />
          </Segment>
        </GridColumn>,
        <GridColumn>
          <Segment
            color="red"
          >
            <Connect(FormogenForm)
              describeUrl="http://localhost:8000/api/v1/sample/books/1/describe_object/"
              formId="form-3"
              getFieldComponent={[Function]}
              getFormComponent={[Function]}
              objectUrl="http://localhost:8000/api/v1/sample/books/1/"
            />
          </Segment>
        </GridColumn>,
      ],
      "className": "ui three column grid",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <Button
              as="button"
              content="Check clean up"
              fluid={true}
              onClick={[Function]}
              role="button"
            />,
            <Segment
              color="red"
            >
              <Connect(FormogenForm)
                createUrl="http://localhost:8000/api/v1/sample/authors/"
                describeUrl="http://localhost:8000/api/v1/sample/authors/describe/"
                formId="form-1"
                getFieldComponent={[Function]}
                getFormComponent={[Function]}
                locale="ru"
              />
            </Segment>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "as": "button",
              "content": "Check clean up",
              "fluid": true,
              "onClick": [Function],
              "role": "button",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <Connect(FormogenForm)
                createUrl="http://localhost:8000/api/v1/sample/authors/"
                describeUrl="http://localhost:8000/api/v1/sample/authors/describe/"
                formId="form-1"
                getFieldComponent={[Function]}
                getFormComponent={[Function]}
                locale="ru"
              />,
              "color": "red",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "createUrl": "http://localhost:8000/api/v1/sample/authors/",
                "describeUrl": "http://localhost:8000/api/v1/sample/authors/describe/",
                "formId": "form-1",
                "getFieldComponent": [Function],
                "getFormComponent": [Function],
                "locale": "ru",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <Segment
            color="red"
          >
            <Connect(FormogenForm)
              describeUrl="http://localhost:8000/api/v1/sample/authors/1/describe_object/"
              formId="form-2"
              getFieldComponent={[Function]}
              getFormComponent={[Function]}
              objectUrl="http://localhost:8000/api/v1/sample/authors/1/"
            />
          </Segment>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <Connect(FormogenForm)
              describeUrl="http://localhost:8000/api/v1/sample/authors/1/describe_object/"
              formId="form-2"
              getFieldComponent={[Function]}
              getFormComponent={[Function]}
              objectUrl="http://localhost:8000/api/v1/sample/authors/1/"
            />,
            "color": "red",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "describeUrl": "http://localhost:8000/api/v1/sample/authors/1/describe_object/",
              "formId": "form-2",
              "getFieldComponent": [Function],
              "getFormComponent": [Function],
              "objectUrl": "http://localhost:8000/api/v1/sample/authors/1/",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <Segment
            color="red"
          >
            <Connect(FormogenForm)
              describeUrl="http://localhost:8000/api/v1/sample/books/1/describe_object/"
              formId="form-3"
              getFieldComponent={[Function]}
              getFormComponent={[Function]}
              objectUrl="http://localhost:8000/api/v1/sample/books/1/"
            />
          </Segment>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <Connect(FormogenForm)
              describeUrl="http://localhost:8000/api/v1/sample/books/1/describe_object/"
              formId="form-3"
              getFieldComponent={[Function]}
              getFormComponent={[Function]}
              objectUrl="http://localhost:8000/api/v1/sample/books/1/"
            />,
            "color": "red",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "describeUrl": "http://localhost:8000/api/v1/sample/books/1/describe_object/",
              "formId": "form-3",
              "getFieldComponent": [Function],
              "getFormComponent": [Function],
              "objectUrl": "http://localhost:8000/api/v1/sample/books/1/",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <GridColumn>
            <Button
              as="button"
              content="Check clean up"
              fluid={true}
              onClick={[Function]}
              role="button"
            />
            <Segment
              color="red"
            >
              <Connect(FormogenForm)
                createUrl="http://localhost:8000/api/v1/sample/authors/"
                describeUrl="http://localhost:8000/api/v1/sample/authors/describe/"
                formId="form-1"
                getFieldComponent={[Function]}
                getFormComponent={[Function]}
                locale="ru"
              />
            </Segment>
          </GridColumn>,
          <GridColumn>
            <Segment
              color="red"
            >
              <Connect(FormogenForm)
                describeUrl="http://localhost:8000/api/v1/sample/authors/1/describe_object/"
                formId="form-2"
                getFieldComponent={[Function]}
                getFormComponent={[Function]}
                objectUrl="http://localhost:8000/api/v1/sample/authors/1/"
              />
            </Segment>
          </GridColumn>,
          <GridColumn>
            <Segment
              color="red"
            >
              <Connect(FormogenForm)
                describeUrl="http://localhost:8000/api/v1/sample/books/1/describe_object/"
                formId="form-3"
                getFieldComponent={[Function]}
                getFormComponent={[Function]}
                objectUrl="http://localhost:8000/api/v1/sample/books/1/"
              />
            </Segment>
          </GridColumn>,
        ],
        "className": "ui three column grid",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <Button
                as="button"
                content="Check clean up"
                fluid={true}
                onClick={[Function]}
                role="button"
              />,
              <Segment
                color="red"
              >
                <Connect(FormogenForm)
                  createUrl="http://localhost:8000/api/v1/sample/authors/"
                  describeUrl="http://localhost:8000/api/v1/sample/authors/describe/"
                  formId="form-1"
                  getFieldComponent={[Function]}
                  getFormComponent={[Function]}
                  locale="ru"
                />
              </Segment>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "as": "button",
                "content": "Check clean up",
                "fluid": true,
                "onClick": [Function],
                "role": "button",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": <Connect(FormogenForm)
                  createUrl="http://localhost:8000/api/v1/sample/authors/"
                  describeUrl="http://localhost:8000/api/v1/sample/authors/describe/"
                  formId="form-1"
                  getFieldComponent={[Function]}
                  getFormComponent={[Function]}
                  locale="ru"
                />,
                "color": "red",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "createUrl": "http://localhost:8000/api/v1/sample/authors/",
                  "describeUrl": "http://localhost:8000/api/v1/sample/authors/describe/",
                  "formId": "form-1",
                  "getFieldComponent": [Function],
                  "getFormComponent": [Function],
                  "locale": "ru",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <Segment
              color="red"
            >
              <Connect(FormogenForm)
                describeUrl="http://localhost:8000/api/v1/sample/authors/1/describe_object/"
                formId="form-2"
                getFieldComponent={[Function]}
                getFormComponent={[Function]}
                objectUrl="http://localhost:8000/api/v1/sample/authors/1/"
              />
            </Segment>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <Connect(FormogenForm)
                describeUrl="http://localhost:8000/api/v1/sample/authors/1/describe_object/"
                formId="form-2"
                getFieldComponent={[Function]}
                getFormComponent={[Function]}
                objectUrl="http://localhost:8000/api/v1/sample/authors/1/"
              />,
              "color": "red",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "describeUrl": "http://localhost:8000/api/v1/sample/authors/1/describe_object/",
                "formId": "form-2",
                "getFieldComponent": [Function],
                "getFormComponent": [Function],
                "objectUrl": "http://localhost:8000/api/v1/sample/authors/1/",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <Segment
              color="red"
            >
              <Connect(FormogenForm)
                describeUrl="http://localhost:8000/api/v1/sample/books/1/describe_object/"
                formId="form-3"
                getFieldComponent={[Function]}
                getFormComponent={[Function]}
                objectUrl="http://localhost:8000/api/v1/sample/books/1/"
              />
            </Segment>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <Connect(FormogenForm)
                describeUrl="http://localhost:8000/api/v1/sample/books/1/describe_object/"
                formId="form-3"
                getFieldComponent={[Function]}
                getFormComponent={[Function]}
                objectUrl="http://localhost:8000/api/v1/sample/books/1/"
              />,
              "color": "red",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "describeUrl": "http://localhost:8000/api/v1/sample/books/1/describe_object/",
                "formId": "form-3",
                "getFieldComponent": [Function],
                "getFormComponent": [Function],
                "objectUrl": "http://localhost:8000/api/v1/sample/books/1/",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
